---

Configuring an AWS Application Load Balancer as a Junior Software Developer
As a junior software developer, it's important to grasp the fundamentals of Application Load Balancers (ALBs) in AWS. ALBs operate at Layer 7 of the OSI model, which means they handle HTTP and HTTPS traffic. Their primary role is to intelligently route traffic to different application instances, ensuring high availability, scalability, and reliability. Let's explore how they work and what makes them so crucial in modern cloud architecture.
What is an Application Load Balancer (ALB)?
An ALB is a type of load balancer provided by AWS that distributes incoming HTTP/HTTPS traffic across multiple targets, such as EC2 instances, containers, and IP addresses. It operates at the application layer (Layer 7) of the OSI model, allowing you to route traffic based on various rules, such as URL paths, hostnames, or even query strings.
Key Terminologies of ALB
Target Group: A collection of resources, such as EC2 instances, that receive traffic from the ALB.
Health Checks: Mechanisms to monitor the health of targets in a target group, ensuring traffic is only routed to healthy targets.
Security Group: A virtual firewall for controlling inbound and outbound traffic to your resources.
Virtual Private Cloud (VPC): An isolated network environment in AWS where your resources, such as ALBs, operate.
Availability Zone (AZ): A distinct data center within a region, designed for fault isolation.
Deregistration Delay: The time allowed for in-flight requests to complete after a target is deregistered from a target group.
Cross-Zone Load Balancing: Distributes traffic evenly across targets in different Availability Zones.
Stickiness: Ensures that requests from a single client are consistently routed to the same target during a session.

Practical Use Cases
Microservices Architectures: ALBs are ideal for applications using microservices, where different services may run on different ports or instances.
Multi-Application Hosting: Instead of deploying multiple Classic Load Balancers for different applications, you can use a single ALB to route traffic to multiple target groups.
Dynamic Port Mapping: When using containers (e.g., Docker and ECS), ALBs can route traffic to dynamically assigned ports, simplifying the architecture.

Target Groups and Routing Rules
When you set up an Application Load Balancer (ALB) in AWS, you'll need to define one or more target groups. A target group is a collection of instances, containers, or other resources that will handle the traffic routed by the ALB. The ALB uses routing rules to determine how to distribute incoming traffic to these target groups.
Here are the different types of routing rules you can configure:
Path-Based Routing: This type of routing allows you to direct traffic based on the URL path of the incoming request. For example, you might route requests to /users to one set of servers and requests to /search to another set. This is particularly useful for microservices architectures, where different paths correspond to different services.

Use Case Example: Imagine an e-commerce platform where /checkout routes to a dedicated group of instances optimized for processing payments, while /catalog routes to instances focused on displaying product information.
Host-Based Routing: With host-based routing, the ALB directs traffic based on the hostname in the URL. For instance, requests to api.example.com can be routed to one target group, while requests to web.example.com are routed to a different target group. This is beneficial when you're hosting multiple applications on the same domain but want to separate traffic based on subdomains. Host-based routing is particularly useful in multi-tenant applications where different customers or departments might have their own subdomain, ensuring that their requests are handled by the correct backend services.
Query Strings and Headers: Advanced routing options include the ability to route traffic based on specific query strings or headers in the HTTP request. For example, if the query string ?Platform=Mobile is present, the ALB can route traffic to a target group optimized for mobile devices, while ?Platform=Desktop could route to a different group.
Considerations: Using query strings and headers for routing provides granular control but requires careful planning to avoid conflicts and ensure that routing rules do not inadvertently overlap.

Health Checks
Health checks are an essential feature of ALBs that help ensure traffic is only sent to healthy targets. The ALB continuously monitors the health of each target in a target group by sending periodic requests to check if the target is functioning properly.
How Health Checks Work: When a target is added to a target group, the ALB begins performing health checks based on the criteria you define (such as the specific URL path to ping and the frequency of checks). If a target fails the health checks, the ALB automatically stops routing traffic to that target until it recovers and passes the health checks again.
Customization: You can customize health checks by specifying parameters such as the protocol (HTTP, HTTPS, TCP), port, path, and response timeout. Additionally, you can define how many consecutive successes or failures determine whether a target is considered healthy or unhealthy.
Benefits: Health checks help maintain high availability and reliability for your applications by preventing traffic from being routed to malfunctioning or unresponsive instances. This minimizes downtime and ensures a smooth user experience.

Sticky Sessions :
You might want to explain sticky sessions if your audience is likely to be interested in maintaining user sessions on the same instance.
Example: "Sticky sessions, or session affinity, ensure that a user's session is consistently routed to the same target. This can be particularly important for applications that store session data locally."

Security Considerations:
Briefly mention the security features available with ALB, such as integrating with AWS Web Application Firewall (WAF) to protect against common web exploits.

Logging and Monitoring:
Add a note on enabling access logs and setting up CloudWatch metrics for monitoring ALB performance and troubleshooting.

---

Cross-Zone Load Balancing
When cross-zone load balancing is enabled, the ELB distributes incoming traffic evenly across all healthy instances in all enabled Availability Zones.
The nodes for your load balancer distribute requests from clients to registered targets. When cross-zone load balancing is enabled, each load balancer node distributes traffic across the registered targets in all enabled Availability Zones. When cross-zone load balancing is disabled, each load balancer node distributes traffic only across the registered targets in its Availability Zone.
The following diagrams demonstrate the effect of cross-zone load balancing with round robin as the default routing algorithm. There are two enabled Availability Zones, with two targets in Availability Zone A and eight targets in Availability Zone B. Clients send requests, and Amazon Route 53 responds to each request with the IP address of one of the load balancer nodes. Based on the round robin routing algorithm, traffic is distributed such that each load balancer node receives 50% of the traffic from the clients. Each load balancer node distributes its share of the traffic across the registered targets in its scope.
If cross-zone load balancing is enabled, each of the 10 targets receives 10% of the traffic. This is because each load balancer node can route its 50% of the client traffic to all 10 targets.
If cross-zone load balancing is disabled:
Each of the two targets in Availability Zone A receives 25% of the traffic.
Each of the eight targets in Availability Zone B receives 6.25% of the traffic.

This is because each load balancer node can route its 50% of the client traffic only to targets in its Availability Zone.

---

Target Groups:
A fundamental component of ALBs, Target Groups serve as the destination for traffic routed by the load balancer, directing incoming requests to the appropriate backend resources.
Traffic Routing: Targets in a Target Group can be various types of backend resources, including EC2 instances, IP addresses, or Lambda functions.
Health Checks: Target Groups perform health checks on registered targets to assess their health status and ensure they can handle incoming traffic.
Dynamic Registration: Targets can be dynamically registered with Target Groups using methods such as manual registration, Auto Scaling integration, or AWS CloudFormation.
Target Attributes: Target Groups have various attributes that control their behavior, such as stickiness, deregistration delay, and slow start.

Target deregistration management refers to the process of handling the removal of unhealthy or unneeded targets from a target group associated with a load balancer. This process is crucial for maintaining the health and efficiency of the application infrastructure behind the load balancer. Here are key aspects of target deregistration management:
Effective target deregistration management ensures that only healthy and available targets receive traffic from the load balancer, improving the overall reliability and performance of the application infrastructure.
Health Checks: Target groups continuously monitor the health of registered targets using health checks. When a target fails a health check, it is considered unhealthy.
Automatic Deregistration: By default, when a target is determined to be unhealthy based on health checks, it is automatically deregistered from the target group. The load balancer stops sending traffic to the unhealthy target until it passes the health checks again.
Deregistration Delay: Target groups support a deregistration delay setting, which specifies the amount of time to wait before removing an unhealthy target from the target group after it fails health checks. This delay helps prevent the premature removal of targets due to transient issues.

Load balancing algorithms are mechanisms used by load balancers to distribute incoming network traffic across multiple servers or resources in a balanced and efficient manner. Different algorithms have varying characteristics and are suitable for different use cases. Here are some common load balancing algorithms:
Round Robin: In Round Robin algorithm, requests are distributed sequentially to each server in a circular order. It's a simple and fair algorithm that evenly distributes traffic among servers. However, it doesn't take into account the server's load or capacity.
Least Outstanding Requests algorithm is a load balancing algorithm that directs incoming requests to the server with the fewest outstanding or pending requests at the time of the request. This algorithm aims to distribute traffic to servers based on their current workload, ensuring that requests are evenly distributed and that no single server becomes overloaded.
Weighted Random algorithm is a load balancing approach that distributes incoming requests to servers based on their assigned weights, but with a random element introduced into the selection process. This algorithm is a variation of the Weighted Round Robin algorithm, but instead of strictly adhering to the weight distribution, it introduces randomness to provide a more dynamic load balancing behavior.

Slow start duration: Gradually ramps up traffic to newly registered targets over a specified period of time. This feature is designed to help prevent overwhelming newly launched or scaled-in instances with a sudden surge of traffic, allowing them to warm up gradually before handling full production-level traffic.
Connection Draining( Deregistration Delay)
Time to complete "in-flight requests" while the instance is de-registering or unhealthy.
Stops sending new requests to EC2 instance which is de-registering
Between 1 to 3600 seconds (default: 300 seconds)

Listener Rules: Target Groups are associated with listeners on the load balancer, and listener rules determine how incoming requests are routed based on conditions such as URL path, hostname, or HTTP headers.
So let's Configure the Application load Balancer in AWS Management Console:
Launching an EC2 instance involves several steps. Here's a detailed guide on each step required to launch an EC2 instance:
Sign in to the AWS Management Console:

Go to the AWS Management Console (https://aws.amazon.com/console/) and sign in using your AWS account credentials.

2. Navigate to the EC2 Dashboard:
Once logged in, navigate to the EC2 service by either searching for "EC2" in the AWS Management Console search bar or selecting "EC2" under the "Compute" section.

3. Choose an AMI (Amazon Machine Image):
In the EC2 Dashboard, click on the "Launch Instance" button to begin the instance launch wizard.
Select an AMI from the list provided. You can choose from AWS-provided AMIs, AWS Marketplace AMIs, or your own custom AMIs.

4. Choose an Instance Type:
After selecting an AMI, you'll need to choose an instance type. Each instance type offers different combinations of CPU, memory, storage, and networking capacity.
Click on the instance type that best fits your requirements. You can use the filter options to narrow down the list based on your needs.

5. Configure Instance Details:
In this step, you'll configure additional settings for your instance, such as the number of instances to launch, network settings, IAM role, user data (optional script executed at launch), etc.
Configure the network settings (VPC, subnet), enable or disable termination protection, add tags for easier instance management, and specify advanced details if necessary.

6. Add Storage:
Next, you'll add storage volumes (EBS volumes) to your instance. By default, a root volume is attached to the instance. You can add additional volumes if needed, specifying volume type, size, and encryption options.

7. Configure Security Group:
Configure the security group settings for your instance. You can create a new security group or select an existing one. Security groups act as virtual firewalls, controlling inbound and outbound traffic to your instance based on defined rules.

8. Review and Launch:
Review all the configurations you've made for your instance to ensure they're correct. Double-check the instance type, storage, security groups, etc.
If everything looks good, click on the "Launch" button to proceed.

9. Create a Key Pair:
If you haven't already created a key pair, you'll be prompted to create one. Key pairs are used for securely connecting to your instance via SSH (for Linux) or RDP (for Windows).
Choose an existing key pair or create a new one, then download the private key file (.pem) to your local machine. Keep this file safe, as it's required for SSH/RDP access.

10. Launch Instance:
After creating or selecting a key pair, click on the "Launch Instances" button to launch your EC2 instance.
AWS will start provisioning the instance based on your configurations. Once the instance is successfully launched, you'll see a confirmation message with details about the instance.

11. Access and Manage Your Instance:
Once the instance is running, you can access and manage it using various methods, such as SSH (for Linux) or RDP (for Windows) for remote access, or AWS Systems Manager Session Manager for browser-based access.
You can also manage your instances, monitor performance, and configure additional settings

Server-1
#!/bin/bash
sudo yum install -y httpd
sudo yum install -y wget
sudo yum install -y unzip

sudo systemctl start httpd
sudo systemctl enable httpd

cd/tmp/

wget https://www.tooplate.com/zip-templates/2137_barista_cafe.zip
unzip 2137_barista_cafe.zip

cp -r 2137_barista_cafe/* /var/www/html/
sudo systemctl restart httpd
Server - 2
#!/bin/bash
sudo yum install -y httpd
sudo yum install -y wget
sudo yum install -y unzip

sudo systemctl start httpd
sudo systemctl enable httpd

cd/tmp/

wget https://www.tooplate.com/zip-templates/2108_dashboard.zip
unzip 2108_dashboard.zip

cp -r 2108_dashboard/* /var/www/html/
sudo systemctl restart httpd

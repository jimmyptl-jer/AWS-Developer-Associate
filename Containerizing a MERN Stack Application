A Guide to Containerizing a MERN Stack Application

What is the MERN Stack?
Before we dive into containerization, let's briefly introduce the MERN stack:
MongoDB: A NoSQL database that stores data in flexible, JSON-like documents.
Express.js: A web application framework for Node.js, providing a robust set of features for building web and mobile applications.
React.js: A JavaScript library for building user interfaces, developed by Facebook.
Node.js: A JavaScript runtime built on Chrome's V8 JavaScript engine, used for building scalable network applications.

Prerequisites
Before getting started, ensure you have the following installed on your machine:
Docker: Install Docker Desktop for your operating system from the official Docker website.
A MERN stack application: You should have a MERN stack application ready to containerize. If you don't have one, you can create a simple one or clone an existing project from a repository like GitHub.

Containerizing the MERN Stack Application
Follow these steps to containerize your MERN stack application:
Github Repo you can refer: https://github.com/jimmyptl-jer/Blog-Application.git
Step 1: Dockerfile
Create a Dockerfile in the root directory of your project. This file will contain instructions for building your Docker image. Here's a basic example:
Dockerfile example for api.

# Use the official Node.js image from Docker Hub as the base image
FROM node

# Set the working directory inside the container
WORKDIR /usr/arc/app

# Set the NODE_ENV environment variable to 'production' to ensure production settings are used
ENV NODE_ENV production

# Copy package.json and package-lock.json files from the host machine to the working directory in the container
COPY package*.json ./

# Display the installed Node.js version
RUN node --version

# Display the installed npm version
RUN npm --version

# Install dependencies using npm ci, which installs dependencies based on package-lock.json for reproducible builds
RUN npm ci --only=production

# Change the user to 'node' to improve security by running the application with a non-root user
USER node

# Copy the application source code from the host machine to the working directory in the container
COPY --chown=node:node . .

# Expose port 3000 to allow communication with the containerized application
EXPOSE 3000

# Specify the default command to run the application when the container starts
CMD ["npm", "start"]
Dockerfile for frontent.

# Use the official Node.js runtime as the base image
FROM node as build

# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json to the working directory
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the entire application code to the container
COPY . .

# Build the React app for production
RUN npm run build

# Use Nginx as the production server
FROM nginx:alpine

# Copy the built React app to Nginx's web server directory
COPY --from=build /app/dist /usr/share/nginx/html

# Expose port 80 for the Nginx server
EXPOSE 80

# Start Nginx when the container runs
CMD ["nginx", "-g", "daemon off;"]
Step 2: Build the Docker Image
Open a terminal and navigate to the directory containing your Dockerfile. Run the following command to build your Docker image:
- Make sure you are in you server folder
docker build -t blog-api:v1 .
Docker image build command for the front end.

docker build -t blog-client:v1 .
Step 3: Run the Docker Container
Once the Docker image is built, you can run a Docker container based on that image:
docker run -p 3000:3000 -d blog-api:v1

docker run -p 80:80 -d blog-clinet:v1
(-d to run the container in detached mode)
To check whether the application is running or not:
Go To: http://localhost:80
Conclusion
Congratulations! You've successfully containerized your MERN stack application using Docker. You now have a portable and scalable environment for running your application, making it easier to deploy and manage in various environments. Containerization simplifies the process of building, shipping, and running your applications, allowing you to focus more on development and less on infrastructure management.
